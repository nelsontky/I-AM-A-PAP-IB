{"version":3,"sources":["utils/CopyContentIcon.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["createSvgIcon","d","useStyles","makeStyles","root","display","justifyContent","card","margin","maxWidth","borderRadius","cardContent","flexDirection","openQuote","fontSize","fontWeight","userSelect","closeQuote","alignSelf","actionsLeft","flexWrap","width","shareButtons","marginLeft","marginRight","actionsRight","getCommentIndex","currCommentIndex","nextCommentIndex","Math","floor","random","comments","length","App","useState","parseInt","window","location","hash","slice","index","setIndex","isNaN","classes","isCopiedSnackbarShown","setIsCopiedSnackBarShown","to","PUBLIC_URL","className","Card","CardContent","Typography","CardActions","Tooltip","title","placement","IconButton","aria-label","onClick","str","el","document","createElement","value","setAttribute","style","position","left","body","appendChild","select","execCommand","removeChild","copyToClipboard","CopyContentIcon","FacebookShareButton","url","href","quote","FacebookIcon","size","round","TelegramShareButton","TelegramIcon","TwitterShareButton","TwitterIcon","WhatsappShareButton","WhatsappIcon","target","rel","Snackbar","anchorOrigin","vertical","horizontal","open","onClose","message","autoHideDuration","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.004ddc69.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { createSvgIcon } from \"@material-ui/core/utils\";\n\nexport default createSvgIcon(\n  <path d=\"M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z\" />,\n  \"CopyContent\"\n);\n","import Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport React, { useState } from \"react\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\nimport HelpIcon from \"@material-ui/icons/Help\";\nimport CopyContentIcon from \"./utils/CopyContentIcon\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { IconButton, Tooltip, Snackbar } from \"@material-ui/core\";\nimport { Redirect } from \"react-router-dom\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  FacebookShareButton,\n  TelegramShareButton,\n  TwitterShareButton,\n  WhatsappShareButton,\n} from \"react-share\";\nimport {\n  FacebookIcon,\n  TelegramIcon,\n  TwitterIcon,\n  WhatsappIcon,\n} from \"react-share\";\n\nimport comments from \"./utils/comments.json\";\n\nconst PUBLIC_URL =\n  process.env.NODE_ENV === \"development\"\n    ? \"\"\n    : \"https://nelsontky.github.io/I-AM-A-PAP-IB\";\n\nconst useStyles = makeStyles({\n  root: {\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n  card: {\n    margin: \"100px 40px 100px 40px\",\n    maxWidth: \"800px\",\n    borderRadius: \"18px\",\n  },\n  cardContent: {\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  openQuote: {\n    fontSize: 48,\n    fontWeight: 600,\n    userSelect: \"none\",\n  },\n  closeQuote: {\n    fontSize: 48,\n    fontWeight: 600,\n    userSelect: \"none\",\n    alignSelf: \"flex-end\",\n  },\n  actionsLeft: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    width: \"75%\",\n  },\n  shareButtons: {\n    display: \"flex\",\n    marginLeft: \"12px !important\",\n    \"& div\": {\n      marginRight: \"8px\",\n      alignSelf: \"center\",\n    },\n  },\n  actionsRight: {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    width: \"25%\",\n  },\n});\n\nfunction getCommentIndex(currCommentIndex?: number): number {\n  let nextCommentIndex: number = Math.floor(Math.random() * comments.length);\n\n  while (nextCommentIndex === currCommentIndex) {\n    nextCommentIndex = Math.floor(Math.random() * comments.length);\n  }\n\n  return nextCommentIndex;\n}\n\nfunction App() {\n  const [index, setIndex] = useState(parseInt(window.location.hash.slice(1)));\n  const isIndexValid = !isNaN(index) || index < 0 || index >= comments.length;\n\n  if (!isIndexValid) {\n    setIndex(getCommentIndex());\n  }\n\n  const classes = useStyles();\n\n  const [isCopiedSnackbarShown, setIsCopiedSnackBarShown] = useState(false);\n\n  function copyToClipboard(str: string) {\n    const el: HTMLTextAreaElement = document.createElement(\"textarea\");\n    el.value = str;\n    el.setAttribute(\"readonly\", \"\");\n    el.style.position = \"absolute\";\n    el.style.left = \"-9999px\";\n    document.body.appendChild(el);\n    el.select();\n    document.execCommand(\"copy\");\n    document.body.removeChild(el);\n  }\n\n  return (\n    <>\n      <Redirect to={PUBLIC_URL + \"/#\" + index} />\n      <div className={classes.root}>\n        <Card className={classes.card}>\n          <CardContent className={classes.cardContent}>\n            <Typography className={classes.openQuote}>“</Typography>\n            <Typography>{comments[index]}</Typography>\n            <Typography className={classes.closeQuote}>”</Typography>\n          </CardContent>\n          <CardActions>\n            <div className={classes.actionsLeft}>\n              <Tooltip title=\"Generate comment\" placement=\"top\">\n                <IconButton\n                  aria-label=\"generate comment\"\n                  onClick={() => {\n                    setIndex(getCommentIndex(index));\n                  }}\n                >\n                  <RefreshIcon />\n                </IconButton>\n              </Tooltip>\n\n              <Tooltip title={\"Copy to clipboard\"} placement=\"top\">\n                <IconButton\n                  aria-label=\"copy comment\"\n                  onClick={() => {\n                    copyToClipboard(comments[index]);\n                    setIsCopiedSnackBarShown(true);\n                  }}\n                >\n                  <CopyContentIcon />\n                </IconButton>\n              </Tooltip>\n\n              <div className={classes.shareButtons}>\n                <Tooltip title=\"Share to Facebook\" placement=\"top\">\n                  <div>\n                    <FacebookShareButton\n                      url={window.location.href}\n                      quote={comments[index]}\n                    >\n                      <FacebookIcon size={32} round />\n                    </FacebookShareButton>\n                  </div>\n                </Tooltip>\n                <Tooltip title=\"Share to Telegram\" placement=\"top\">\n                  <div>\n                    <TelegramShareButton\n                      url={window.location.href}\n                      title={comments[index]}\n                    >\n                      <TelegramIcon size={32} round />\n                    </TelegramShareButton>\n                  </div>\n                </Tooltip>\n                <Tooltip title=\"Share to Twitter\" placement=\"top\">\n                  <div>\n                    <TwitterShareButton\n                      url={window.location.href}\n                      title={comments[index]}\n                    >\n                      <TwitterIcon size={32} round />\n                    </TwitterShareButton>\n                  </div>\n                </Tooltip>\n                <Tooltip title=\"Share to Whatsapp\" placement=\"top\">\n                  <div>\n                    <WhatsappShareButton\n                      url={window.location.href}\n                      title={comments[index]}\n                    >\n                      <WhatsappIcon size={32} round />\n                    </WhatsappShareButton>\n                  </div>\n                </Tooltip>\n              </div>\n            </div>\n\n            <div className={classes.actionsRight}>\n              <Tooltip title=\"About this site\" placement=\"top\">\n                <IconButton\n                  aria-label=\"about this site\"\n                  target=\"_blank\"\n                  href=\"https://github.com/nelsontky/I-AM-A-PAP-IB/blob/master/README.md\"\n                  rel=\"noopener noreferrer\"\n                >\n                  <HelpIcon />\n                </IconButton>\n              </Tooltip>\n            </div>\n          </CardActions>\n        </Card>\n\n        <Snackbar\n          anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\n          open={isCopiedSnackbarShown}\n          onClose={() => setIsCopiedSnackBarShown(false)}\n          message=\"Comment copied to clipboard!\"\n          autoHideDuration={5000}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}